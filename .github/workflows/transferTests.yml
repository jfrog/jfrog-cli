name: Transfer Tests
on:
  workflow_dispatch:
  push:
    branches:
      - "master"
  # Triggers the workflow on PRs to master branch only.
  pull_request_target:
    types: [opened, synchronize, labeled]
    branches:
      - "master"
# Ensures that only the latest commit is running for each PR at a time.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  Transfer-Artifactory-7-Tests:
    name: Transfer tests (${{ matrix.os.name }})
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request_target' && (github.event.action != 'labeled' || contains(github.event.pull_request.labels.*.name, 'safe to test')))
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: ubuntu
            version: 24.04
          - name: windows
            version: 2022
          - name: macos
            version: 14
    runs-on: ${{ matrix.os.name }}-${{ matrix.os.version }}
    steps:
      - name: Skip macOS - JGC-413
        if: matrix.os.name == 'macos'
        run: |
          echo "::warning::JGC-413 - Skip until artifactory bootstrap in osx is fixed"
          exit 0

      - name: Checkout code
        if: matrix.os.name != 'macos'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Go with cache
        if: matrix.os.name != 'macos'
        uses: jfrog/.github/actions/install-go-with-cache@main

      - name: Debug macOS Environment and Set Timeout
        if: runner.os == 'macOS'
        run: |
          echo "=== macOS Debug Information ==="
          echo "Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "macOS Build: $(sw_vers -buildVersion)"
          echo "Available memory: $(system_profiler SPHardwareDataType | grep Memory || echo 'Memory info not available')"
          echo "Available disk space: $(df -h)"
          echo "Java version: $(java -version 2>&1 || echo 'Java not found')"
          echo "Go version: $(go version)"
          echo "Setting RT_CONNECTION_TIMEOUT_SECONDS to 2400 for macOS"
          echo "RT_CONNECTION_TIMEOUT_SECONDS=2400" >> $GITHUB_ENV

      - name: Install local Artifactory
        if: matrix.os.name != 'macos'
        uses: jfrog/.github/actions/install-local-artifactory@main
        with:
          RTLIC: ${{ secrets.RTLIC }}
          JFROG_HOME: ${{ runner.temp }}
          RT_CONNECTION_TIMEOUT_SECONDS: ${{ env.RT_CONNECTION_TIMEOUT_SECONDS || '1200' }}

      - name: Run transfer tests
        if: matrix.os.name != 'macos'
        run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.transfer --test.installDataTransferPlugin --jfrog.url=http://127.0.0.1:8082 --jfrog.targetUrl=${{ secrets.PLATFORM_URL }} --jfrog.targetAdminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --jfrog.home=${{ runner.temp }} --ci.runId=${{ runner.os }}-transfer-7

  Transfer-Artifactory-6-Tests:
    name: artifactory-6
    # Fixed runner image to set the java tools needed for artifactory 6
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Setup Go with cache
        uses: jfrog/.github/actions/install-go-with-cache@main

      - name: Debug macOS Environment and Set Timeout
        if: runner.os == 'macOS'
        run: |
          echo "=== macOS Debug Information ==="
          echo "Architecture: $(uname -m)"
          echo "macOS Version: $(sw_vers -productVersion)"
          echo "macOS Build: $(sw_vers -buildVersion)"
          echo "Available memory: $(system_profiler SPHardwareDataType | grep Memory || echo 'Memory info not available')"
          echo "Available disk space: $(df -h)"
          echo "Java version: $(java -version 2>&1 || echo 'Java not found')"
          echo "Go version: $(go version)"
          echo "Setting RT_CONNECTION_TIMEOUT_SECONDS to 2400 for macOS"
          echo "RT_CONNECTION_TIMEOUT_SECONDS=2400" >> $GITHUB_ENV

      - name: Install local Artifactory
        uses: jfrog/.github/actions/install-local-artifactory@main
        with:
          RTLIC: ${{ secrets.RTLIC_V6 }}
          JFROG_HOME: ${{ runner.temp }}
          VERSION: 6.23.21
          RT_CONNECTION_TIMEOUT_SECONDS: ${{ env.RT_CONNECTION_TIMEOUT_SECONDS || '1200' }}

      - name: Run transfer tests
        run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.transfer --test.installDataTransferPlugin --jfrog.targetUrl=${{ secrets.PLATFORM_URL }} --jfrog.targetAdminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --jfrog.home=${{ runner.temp }} --ci.runId=${{ runner.os }}-transfer-6
