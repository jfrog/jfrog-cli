node("docker-ubuntu20-xlarge") {
    stage('Setup Environment and Tools') {
        def goRoot = tool name: 'go-1.23.9', type: 'go'
        withEnv(["GOROOT=${goRoot}", "PATH+GO=${goRoot}/bin", "GO111MODULE=on"]) {
            def workspacePath = pwd()
            echo "The repository was cloned into the Jenkins workspace at:"
            echo "${workspacePath}"
            echo "--- Contents of workspace ---"
            sh 'ls -la'
            cleanWs()
            withCredentials([string(credentialsId: 'repo21-url', variable: 'REPO21_URL')]) {
                echo "${REPO21_URL}"
                def repo21Name = "${REPO21_URL}".substring(8, "${REPO21_URL}".length())
                env.REPO_NAME_21 = "$repo21Name"
            }
            def architectures = [
                    [pkg: 'jfrog-cli-windows-amd64', goos: 'windows', goarch: 'amd64', fileExtension: '.exe', chocoImage: '${REPO_NAME_21}/jfrog-docker/linuturk/mono-choco'],
                    [pkg: 'jfrog-cli-linux-386', goos: 'linux', goarch: '386', fileExtension: '', debianImage: '${REPO_NAME_21}/jfrog-docker/i386/ubuntu:20.04', debianArch: 'i386'],
                    [pkg: 'jfrog-cli-linux-amd64', goos: 'linux', goarch: 'amd64', fileExtension: '', debianImage: '${REPO_NAME_21}/jfrog-docker/ubuntu:20.04', debianArch: 'x86_64', rpmImage: 'almalinux:8.10'],
                    [pkg: 'jfrog-cli-linux-arm64', goos: 'linux', goarch: 'arm64', fileExtension: ''],
                    [pkg: 'jfrog-cli-linux-arm', goos: 'linux', goarch: 'arm', fileExtension: ''],
                    [pkg: 'jfrog-cli-mac-386', goos: 'darwin', goarch: 'amd64', fileExtension: ''],
                    [pkg: 'jfrog-cli-mac-arm64', goos: 'darwin', goarch: 'arm64', fileExtension: ''],
                    [pkg: 'jfrog-cli-linux-s390x', goos: 'linux', goarch: 's390x', fileExtension: ''],
                    [pkg: 'jfrog-cli-linux-ppc64', goos: 'linux', goarch: 'ppc64', fileExtension: ''],
                    [pkg: 'jfrog-cli-linux-ppc64le', goos: 'linux', goarch: 'ppc64le', fileExtension: '']
            ]

            identifier = 'jf'

            masterBranch = 'v2'
            devBranch = "dev"
            devRepo = "https://github.com/jfrog/jfrog-cli.git"
            featureRepo = env.REPO_URL
            featureBranch = env.BRANCH
            if (!featureRepo.endsWith(".git")) {
                if (featureRepo.endsWith("/")) {
                    featureRepo = featureRepo.substring(0, str.length() - 1)
                }
                featureRepo += ".git"
            }
            if (featureBranch) {
                if (featureBranch.contains('origin')) {
                    featureBranch = featureBranch.replaceAll("^.*/", "")
                }
            } else {
                featureBranch = "dev"
            }

            releaseVersion = ''

            repo = 'jfrog-cli'
            sh 'rm -rf temp'
            sh 'mkdir temp'

            env.CI = true
            env.JFROG_CLI_LOG_LEVEL = "DEBUG"
            def identifier = 'jf'

            dir('temp') {
                sh "cat /etc/lsb-release"
                cliWorkspace = pwd()
                sh "echo cliWorkspace=$cliWorkspace"
                builderDir = "${identifier}-builder/"
                sh "mkdir $builderDir"
                builderPath = "${cliWorkspace}/${builderDir}${identifier}" // Use full path for clarity
                def yamlContent = """
                    version: 1
                    type: go
                    resolver:
                        repo: ecosys-dev-build-artifactory
                        serverId: repo21
                    deployer:
                        repo: ecosys-dev-build-artifactory
                        serverId: repo21
                """
                sh 'mkdir -p .jfrog/projects'
                writeFile(file: '.jfrog/projects/go.yaml', text: yamlContent)
                echo "Successfully created .jfrog/projects/go.yaml"

                stage('Last Release Build') {
                    sh "pwd"
                    sh 'git clone $devRepo'
                    setReleaseVersion()
                    validateReleaseVersion()
                    moveBinaryToRoot()
                }

                stage('Clone Source Repo') {
                    dir("${cliWorkspace}/${repo}/temp") {
                        sh "git clone ${featureRepo}"
                    }
                }

                stage('jf build and upload binaries phase') {
                    buildAndUploadBinaryAndBuildInfo(architectures)
                }
            }
        }
    }
}

def moveBinaryToRoot(){
    sh "mv '${cliWorkspace}${repo}/${identifier}' '${cliWorkspace}/'"
    sh "pwd"
    sh "ls -la"
}

def getCliVersion(exePath) {
    version = sh(script: "$exePath -v | tr -d 'jfrog version' | tr -d '\n'", returnStdout: true)
    return version
}

def buildAndUploadBinaryAndBuildInfo(architectures) {
    version = getCliVersion(builderPath)
    print "CLI version: $version"

    configRepo21()

    try {
        print "Uploading version $version to Repo21"
        uploadCliBinary(architectures)
        sh "echo Successfully uploaded the binaries"
        uploadBuildInfo()
    } finally {
        cleanupRepo21()
    }
}

def setReleaseVersion() {
    dir("$cliWorkspace/$repo") {
        sh "pwd"
        sh "git checkout $devBranch"
        sh "build/build.sh $identifier"
        releaseVersion = getCliVersion("./jf")
    }
}

def validateReleaseVersion() {
    sh "pwd"
    if (releaseVersion=="") {
        error "releaseVersion parameter is empty"
    }
    if (releaseVersion.startsWith("v")) {
        error "releaseVersion parameter should not start with a preceding \"v\""
    }
    // Verify version stands in semantic versioning.
    def pattern = /^2\.(\d+)\.(\d+)$/
    if (!(releaseVersion =~ pattern)) {
        error "releaseVersion is not a valid version"
    }
}

// Config Repo21 as default server.
def configRepo21() {
    withCredentials([
        usernamePassword(credentialsId: 'repo21', usernameVariable: 'REPO21_USER', passwordVariable: 'REPO21_PASSWORD'),
        string(credentialsId: 'repo21-url', variable: 'REPO21_URL')
    ]) {
        sh """#!/bin/bash
            $builderPath c add repo21 --url=$REPO21_URL --user=$REPO21_USER --password=$REPO21_PASSWORD --overwrite
            $builderPath c use repo21
        """
    }
}

def cleanupRepo21() {
    sh """#!/bin/bash
        $builderPath c rm repo21
    """
}

def uploadCliBinary(architectures) {
    for (int i = 0; i < architectures.size(); i++) {
        def currentBuild = architectures[i]
        stage("Build and upload ${currentBuild.pkg}") {
            buildAndUpload(currentBuild.goos, currentBuild.goarch, currentBuild.pkg, currentBuild.fileExtension)
        }
    }
}

def uploadBinaryToJfrogRepo21(pkg, fileName) {
    sh """#!/bin/bash
        set -e
        $builderPath rt u ${jfrogCliRepoDir}/${fileName} ecosys-dev-build-artifactory/$identifier/$version/$pkg/ --flat
        echo Uploaded the binary here: ecosys-dev-build-artifactory/$identifier/$version/$pkg/
    """
}

def uploadBuildInfo() {
    stage('Build & Upload Build-Info') {
    def buildNumber = env.BUILD_NUMBER
    def commitSha = env.GIT_COMMIT
    def buildName = "jf-dev-build"+buildNumber
    sh """#!/bin/bash
        set -e
        cd ${jfrogCliRepoDir}
        $builderPath go build --build-name="${buildName}" --build-number="${buildNumber}"
        ls -la
        echo Successfully build-info generated.
        $builderPath rt build-publish "${buildName}" "${buildNumber}"
    """
    }
}

def build(goos, goarch, pkg, fileName) {
    dir("${jfrogCliRepoDir}") {
        env.GOOS="$goos"
        env.GOARCH="$goarch"
        sh "build/build.sh $fileName"
        sh "chmod +x $fileName"
    }
}

def buildAndUpload(goos, goarch, pkg, fileExtension) {
    def extension = fileExtension == null ? '' : fileExtension
    def fileName = "$identifier$fileExtension"

    build(goos, goarch, pkg, fileName)
    uploadBinaryToJfrogRepo21(pkg, fileName)
    sh "rm $jfrogCliRepoDir/$fileName"
}
